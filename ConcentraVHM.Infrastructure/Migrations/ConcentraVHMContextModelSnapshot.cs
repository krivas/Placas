// <auto-generated />
using System;
using ConcentraVHM.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConcentraVHM.Infrastructure.Migrations
{
    [DbContext(typeof(ConcentraVHMContext))]
    partial class ConcentraVHMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConcentraVHM.Domain.Entities.Cliente", b =>
                {
                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Cedula");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("ConcentraVHM.Domain.Entities.OrdenesPlacas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClienteCedula")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteCedula");

                    b.ToTable("OrdenesPlacas");
                });

            modelBuilder.Entity("ConcentraVHM.Domain.Entities.Placa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClienteCedula")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoAutoMovilId")
                        .HasColumnType("int");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteCedula");

                    b.HasIndex("TipoAutoMovilId");

                    b.ToTable("Placas");
                });

            modelBuilder.Entity("ConcentraVHM.Domain.Entities.TipoAutoMovil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TiposAutoMovil");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Publico",
                            Tipo = "A",
                            Valor = 100
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Privado",
                            Tipo = "F",
                            Valor = 200
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Transporte",
                            Tipo = "T",
                            Valor = 300
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Pesado",
                            Tipo = "P",
                            Valor = 400
                        });
                });

            modelBuilder.Entity("ConcentraVHM.Domain.Entities.OrdenesPlacas", b =>
                {
                    b.HasOne("ConcentraVHM.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteCedula");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ConcentraVHM.Domain.Entities.Placa", b =>
                {
                    b.HasOne("ConcentraVHM.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteCedula");

                    b.HasOne("ConcentraVHM.Domain.Entities.TipoAutoMovil", "TipoAutoMovil")
                        .WithMany()
                        .HasForeignKey("TipoAutoMovilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("TipoAutoMovil");
                });
#pragma warning restore 612, 618
        }
    }
}
